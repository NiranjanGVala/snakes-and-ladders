(()=>{"use strict";const e=document.getElementById("game-container"),n={speech:!0,players:[],currentPlayer:{},index:0,mode:"init",loading:!1,currentSound:!1,movingPieceSound:!1,rollingDiceSound:!1,ladderSounds:{},snakeSounds:{},overHundredSounds:{},winSounds:{}},t=new class{constructor(){this.voices=[]}#e=window.speechSynthesis;#n=!1;#t={};#i(){return new Promise((async(e,n)=>{this.voices=this.#e.getVoices(),this.voices=this.voices.filter((e=>(e.default&&(this.#t.lang=e.lang,this.#t.voice=e),/en/.test(e.lang)))),this.#n=!0,e()}))}speak(e,t){return this.#e.cancel(),new Promise((async(i,a)=>{if(n.speech){this.#n=this.#n?this.#n:await this.#i(),void 0!==speechSynthesis.onvoiceschanged&&(speechSynthesis.onvoiceschanged=await this.#i);let n=new SpeechSynthesisUtterance(e);n.lang=this.#t.lang,n.voice=this.#t.voice,this.#e.speak(n),n.onend=()=>{i()},t&&(t.cancel=()=>{i()})}else i()}))}},i={4:14,9:31,20:38,28:84,40:59,51:67,63:81,71:91},a={17:7,54:34,62:19,64:60,87:24,93:73,95:75,99:78},r=async function(){if(n.loading||(n.loading=!0),n.currentPlayer.overHundred){const e=`${n.currentPlayer.name}, You've to land on exact position of 100. Please try again in a next turn.`;return await c(e),await t.speak(e),void n.currentPlayer.finalStatus()}if(n.currentPlayer.gameOver){const e=`${n.currentPlayer.name}, You landed on destination of your dreem! \n            Very very congratulations to you! You won the Game! \n            It's party time.`;if(!n.winSounds.winSound&&!n.winSounds.cheersSound){const e=u("/media/win.mp3"),t=u("/media/cheers.mp3");e.volume=.25,t.volume=.25,n.winSounds.winSound=e,n.winSounds.cheersSound=t}return await c(e),await Promise.all([t.speak(e),d(n.winSounds.winSound,1),d(n.winSounds.cheersSound,1)]),void n.currentPlayer.finalStatus()}if(n.currentPlayer.ladder.position){const e=`${n.currentPlayer.name}, You reached at the position ${n.currentPlayer.currentPosition}. Great! You are going to climb a ladder!`;if(!n.ladderSounds.ladderSound){const e=u("/media/ladder.mp3");e.volume=.15,n.ladderSounds.ladderSound=e}return await c(e),await Promise.all([t.speak(e),d(n.ladderSounds.ladderSound,1)]),n.currentPlayer.ladder.position=0,void n.currentPlayer.movePiece()}if(n.currentPlayer.snake.position){const e=`${n.currentPlayer.name}, You reached at the position ${n.currentPlayer.currentPosition}. Oh no, You got a snake byte. You have to descend down.`;if(!n.snakeSounds.snakeSound){const e=u("/media/snake.mp3");e.volume=1,n.snakeSounds.snakeSound=e}return await c(e),await Promise.all([t.speak(e),d(n.snakeSounds.snakeSound,3)]),n.currentPlayer.snake.position=0,void n.currentPlayer.movePiece()}const e=`${n.currentPlayer.name}, You got ${n.currentPlayer.currentValue}.`;await c(e),await t.speak(e),n.currentPlayer.movePiece()},o=new class{constructor(){}async roleDice(){n.loading||(n.loading=!0);const e="Rolling Dice...";if(n.currentPlayer.currentValue=Math.floor(6*Math.random())+1,await c(e),n.rollingDiceSound)await Promise.all([d(n.rollingDiceSound,1),t.speak(e)]),r();else{const i=u("/media/dice_rolling.mp3");i.volume=1,n.rollingDiceSound=i,await Promise.all([d(n.rollingDiceSound,1),t.speak(e)]),r()}}},s=class{constructor(e){this.ownSound=e,this.name="",this.currentPosition=1,this.currentValue=0,this.overHundred=!1,this.gameOver=!1,this.ladder=!1,this.snake=!1}#a(e){return new Promise((async(i,a)=>{if(this.ladder.position)await c(e),await Promise.all([l(),t.speak(e)]),this.currentValue=0,r(),this.currentPosition=this.ladder.position,i();else{if(!n.ladderSounds.movingPieceSound){const e=u("/media/piece_move_up.mp3");e.volume=1,n.ladderSounds.movingPieceSound=e}await c(e),await Promise.all([t.speak(e),d(n.ladderSounds.movingPieceSound,1)]),this.finalStatus(),this.ladder=!1,i()}}))}#r(e){return new Promise((async(i,a)=>{if(this.snake.position)await c(e),await Promise.all([t.speak(e),l()]),this.currentValue=0,r(),this.currentPosition=this.snake.position,i();else{if(!n.snakeSounds.movingPieceSound){const e=u("/media/piece_move_down.mp3");e.volume=1,n.snakeSounds.movingPieceSound=e}await c(e),await Promise.all([t.speak(e),d(n.snakeSounds.movingPieceSound,1)]),this.finalStatus(),this.snake=!1,i()}}))}#o(e){return new Promise((async(i,a)=>{if(this.overHundred){if(!n.overHundredSounds.stumbledSound&&!n.overHundredSounds.moveDownSound){const e=u("/media/over_hundred.mp3"),t=u("/media/move_down.ogg");e.volume=1,t.volume=1,n.overHundredSounds.stumbledSound=e,n.overHundredSounds.moveDownSound=t}await c(e),await Promise.all([t.speak(e),await l(),await d(n.overHundredSounds.stumbledSound,1),d(n.overHundredSounds.moveDownSound,1)]),this.currentValue=0,r(),i()}}))}#s(e){return new Promise((async(n,i)=>{this.gameOver&&(await c(e),await Promise.all([l(),t.speak(e)]),this.currentValue=0,r(),n())}))}async renderPlayGround(){"init"===n.mode&&(n.mode="started"),this.ownSound.play(),this.ownSound.loop=!0;const e=`Hi ${this.name}, It's your turn. \n        You are currently at the position ${this.currentPosition}. \n        To role the dice, press the space bar or enter key. \n        To hear these instructions again, press CTRL + J.`;t.speak(e),await c(e,{inputId:"role-dice",inputLabel:"Role Dice"}),o.roleDice()}async movePiece(){n.loading||(n.loading=!0);const e=`${this.name}, moving your piece...`;this.currentPosition+=this.currentValue,await new Promise(((e,t)=>{if(n.currentPlayer.currentPosition>100){const t=n.currentPlayer.currentPosition-n.currentPlayer.currentValue;n.currentPlayer.currentValue=100-t,n.currentPlayer.currentPosition=t,n.currentPlayer.overHundred=!0,e()}100===n.currentPlayer.currentPosition&&(n.currentPlayer.gameOver=!0,e()),i[n.currentPlayer.currentPosition]&&(n.currentPlayer.ladder={position:i[n.currentPlayer.currentPosition]},e()),a[n.currentPlayer.currentPosition]&&(n.currentPlayer.snake={position:a[n.currentPlayer.currentPosition]},e()),e()})),this.overHundred?await this.#o(e):this.gameOver?await this.#s(e):this.ladder?await this.#a(e):this.snake?await this.#r(e):(await c(e),await Promise.all([t.speak(e),l()]),this.finalStatus())}async finalStatus(){n.loading&&(n.loading=!1);let e="";const i={inputId:"continue",inputLabel:"Continue"};if(this.overHundred)e=`${this.name}, You are still at the position ${this.currentPosition}. \n            To continue, press the space bar or enter key. \n            To hear these instructions again, press CTRL + J.`,this.overHundred=!1;else{if(this.gameOver)return i.inputId="finish-game",i.inputLabel="Finish Game",e="Game Status. \n            To finish the game, press the space bar or enter key. \n            To hear these instructions again, press CTRL + J.",t.speak(e),await c(e,i),void this.finishGame();e=`${this.name}, You've reached at the position ${this.currentPosition}. \n            To continue, press the space bar or enter key. \n            To hear these instructions again, press CTRL + J.`}if(n.index===n.players.length-1)return t.speak(e),await c(e,i),n.index=0,this.ownSound.pause(),this.ownSound.currentTime=0,n.currentPlayer=n.players[0],void n.currentPlayer.renderPlayGround();t.speak(e),await c(e,i),this.ownSound.pause(),this.ownSound.currentTime=0,n.currentPlayer=n.players[++n.index],n.currentPlayer.renderPlayGround()}finishGame(){console.log("Game finished!")}},u=function(e){const n=new Audio(e);return n.volume=.05,n},d=function(e,n){return new Promise(((t,i)=>{e.play(),e.onended=()=>{--n?e.play():t()}}))},l=async function(){return new Promise((async(e,t)=>{if(n.movingPieceSound)await d(n.movingPieceSound,n.currentPlayer.currentValue),e();else{const t=u("/media/step.mp3");t.volume=1,n.movingPieceSound=t,await d(n.movingPieceSound,n.currentPlayer.currentValue),e()}}))},c=function(i,a){return a=a||!1,new Promise((async(r,o)=>{let d="";if("init"===n.mode){const o=`<form id="${a.formId}">\n            <label for="${a.inputId}">${a.inputLabel}</label>\n            <input id="${a.inputId}" type="${a.inputType}" aria-describedby="${a.inputId}-instructions"\n                ${"number"===a.inputType?'min="1" max="4"':""}>\n            <p id="${a.inputId}-instructions">${i}</p>\n            <button type="submit" hidden>Next</button>\n            </form>`;e.innerHTML=o,d=document.getElementById(a.inputId),document.getElementById(a.formId).addEventListener("submit",(e=>{e.preventDefault(),function(e,t){if("numberOfPlayers"!==e.inputId||n.players.length)n.players[n.index].name=t||`Player ${n.index+1}`;else{let e=0;for(;e<t;e++){let t=u(`/media/player_${e+1}.mp3`);n.players.push(new s(t))}}}(a,d.value),r()})),d.addEventListener("input",(e=>{t.speak(e.target.value)}))}if("started"===n.mode&&!n.loading){const n=`<p id="instructions">${i}</p>\n            <button id="${a.inputId}" aria-describedby="instructions">${a.inputLabel}</button>`;e.innerHTML=n,d=document.getElementById(a.inputId),d.onclick=()=>r()}if("started"===n.mode&&n.loading){const n=`<div id="instructions" tabindex="0">${i}</div>`;e.innerHTML=n,d=document.getElementById("instructions"),r()}d&&(d.focus(),d.addEventListener("keydown",(async e=>{if(e.ctrlKey&&"j"===e.key&&(e.preventDefault(),t.speak(i)),e.ctrlKey&&"s"===e.key){let a={};e.preventDefault(),n.speech?(a.cancel&&a.cancel(),t.speak("Speech Off"),n.speech=!1):(n.speech=!0,await t.speak(`Speech On. ${i}`,a))}})))}))},m=new class{constructor(){}firstScreenWidgit(){e.innerHTML='<form id="start-game" action="#">\n            <h1>Snakes and Ladders</h1>\n            <button id="start">Start Game</button>\n        </form>',document.getElementById("start").focus(),document.getElementById("start-game").addEventListener("submit",(e=>{e.preventDefault(),this.welcomeAnimation()}))}async welcomeAnimation(){const n=await new Promise(((e,n)=>{const t=new Audio("/media/intro.mp3");t.preload="metadata",t.addEventListener("loadedmetadata",(()=>{t.volume=.05,e(t)}))})),i=document.createElement("p");i.textContent="Welcome",i.classList.add("welcome"),e.replaceChild(i,document.getElementById("start-game")),n.play(),i.style.animation=`welcome ${n.duration}s`,setTimeout((async()=>await t.speak(i.textContent)),1e3*n.duration/4),n.onended=()=>this.fetchNumberOfPlayers()}async fetchNumberOfPlayers(){const e="Enter number of players. \n        Maximum up-to 4 players are allowed. \n        You can also use up or down arrow keys to adjust the value. \n        To hear these instructions again, Press CTRL + J.";n.currentSound?n.currentSound.play():(n.currentSound=u("/media/select_players.mp3"),n.currentSound.play(),n.currentSound.loop=!0),t.speak(e),await c(e,{formId:"number-of-players",inputId:"numberOfPlayers",inputType:"number",inputLabel:"Number of Players"}),this.fetchPlayersName()}async fetchPlayersName(){const e=`Enter name of the player number ${n.index+1}. \n        To hear these instructions again, press CTRL +J.`,i={formId:"player-name",inputId:"playerNameInput",inputLabel:`Name of the Player Number ${n.index+1}`,inputType:"text"};if(t.speak(e),n.index===n.players.length-1)return await c(e,i),n.index=0,n.currentSound.pause(),n.currentPlayer=n.players[0],void n.currentPlayer.renderPlayGround();await c(e,i),n.index++,this.fetchPlayersName()}};window.onload=()=>{m.firstScreenWidgit()}})();