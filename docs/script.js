(()=>{"use strict";var e={};e.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),(()=>{var n;e.g.importScripts&&(n=e.g.location+"");var t=e.g.document;if(!n&&t&&(t.currentScript&&(n=t.currentScript.src),!n)){var i=t.getElementsByTagName("script");i.length&&(n=i[i.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),e.p=n})(),e.p,e.p,e.p,e.p,e.p,e.p,e.p,e.p,e.p,e.p,e.p,e.p,e.p,e.p,e.p;const n={introSound:!1,speech:!0,players:[],currentPlayer:{},index:0,mode:"init",loading:!1,rounds:1,currentSound:!1,movingPieceSound:!1,rollingDiceSound:!1,playersSound:[],ladderSounds:{},snakeSounds:{},overHundredSound:!1,winSounds:{}},t=document.getElementById("game-container"),i={file:"media/intro.mp3",volume:.05},r={file:"media/select_players.mp3",loop:!0},a={file:"media/player_1.mp3",loop:!0},o={file:"media/player_2.mp3",loop:!0},s={file:"media/player_3.mp3",loop:!0},u={file:"media/player_4.mp3",loop:!0},l={file:"media/dice_rolling.mp3",volume:1},d={file:"media/step.mp3",volume:1},c={file:"media/ladder.mp3",volume:.15},p={file:"media/snake.mp3",volume:1},m={file:"media/piece_move_up.mp3",volume:1},h={file:"media/piece_move_down.mp3",volume:1},y={file:"media/over_hundred.mp3",volume:1},w={file:"media/win.mp3",volume:.25},P={file:"media/cheers.mp3",volume:.25},f=new class{constructor(){this.voices=[]}#e=window.speechSynthesis;#n=!1;#t={};#i(){return new Promise((async(e,n)=>{this.voices=this.#e.getVoices(),this.voices=this.voices.filter((e=>(e.default&&(this.#t.lang=e.lang,this.#t.voice=e),/en/.test(e.lang)))),this.#n=!0,e()}))}speak(e,t){return this.#e.cancel(),new Promise((async(i,r)=>{if(n.speech){this.#n=this.#n?this.#n:await this.#i(),void 0!==speechSynthesis.onvoiceschanged&&(speechSynthesis.onvoiceschanged=await this.#i);let n=new SpeechSynthesisUtterance(e);n.lang=this.#t.lang,n.voice=this.#t.voice,this.#e.speak(n),n.onend=()=>{i()},t&&(t.cancel=()=>{i()})}else r()}))}},g={4:14,9:31,20:38,28:84,40:59,51:67,63:81,71:91},v={17:7,54:34,62:19,64:60,87:24,93:73,95:75,99:78},S=async function(){if(n.loading||(n.loading=!0),n.currentPlayer.overHundred){const e=`${n.currentPlayer.name}, You've to land on exact position of 100. Please try again in a next turn.`;await x(e);try{await f.speak(e),n.currentPlayer.finalStatus()}catch{setTimeout((()=>n.currentPlayer.finalStatus()),3e3)}return}if(n.currentPlayer.gameOver){const e=`${n.currentPlayer.name}, You landed on destination of your dreem! \n            Very very congratulations to you! You won the Game! \n            It's party time.`;return await x(e),await Promise.allSettled([f.speak(e),await T(n.winSounds.winSound,1),T(n.winSounds.cheersSound,1)]),void n.currentPlayer.finalStatus()}if(n.currentPlayer.ladder.position){const e=`${n.currentPlayer.name}, You reached at the position ${n.currentPlayer.currentPosition}. Great! You are going to climb a ladder!`;return await x(e),await Promise.allSettled([f.speak(e),T(n.ladderSounds.ladderSound,1)]),n.currentPlayer.ladder.position=0,void n.currentPlayer.movePiece()}if(n.currentPlayer.snake.position){const e=`${n.currentPlayer.name}, You reached at the position ${n.currentPlayer.currentPosition}. Oh no, You got a snake byte. You have to descend down.`;return await x(e),await Promise.allSettled([f.speak(e),T(n.snakeSounds.snakeSound,3)]),n.currentPlayer.snake.position=0,void n.currentPlayer.movePiece()}const e=`${n.currentPlayer.name}, You got ${n.currentPlayer.currentValue}.`;await x(e);try{await f.speak(e),n.currentPlayer.movePiece()}catch{setTimeout((()=>n.currentPlayer.movePiece()),3e3)}},k=new class{constructor(){}async roleDice(){n.loading||(n.loading=!0);const e="Rolling Dice...";n.currentPlayer.currentValue=Math.floor(6*Math.random())+1,await Promise.allSettled([x(e),T(n.rollingDiceSound,1),f.speak(e)]),S()}},b=class{constructor(e){this.ownSound=e,this.name="",this.currentPosition=1,this.currentValue=0,this.overHundred=!1,this.gameOver=!1,this.ladder=!1,this.snake=!1}#r(e){return new Promise((async(t,i)=>{this.ladder.position?(await x(e),await Promise.allSettled([I(),f.speak(e)]),this.currentValue=0,S(),this.currentPosition=this.ladder.position,t()):(await x(e),await Promise.allSettled([f.speak(e),T(n.ladderSounds.movingPieceSound,1)]),this.finalStatus(),this.ladder=!1,t())}))}#a(e){return new Promise((async(t,i)=>{this.snake.position?(await x(e),await Promise.allSettled([f.speak(e),I()]),this.currentValue=0,S(),this.currentPosition=this.snake.position,t()):(await x(e),await Promise.allSettled([f.speak(e),T(n.snakeSounds.movingPieceSound,1)]),this.finalStatus(),this.snake=!1,t())}))}#o(e){return new Promise((async(t,i)=>{this.overHundred&&(await x(e),await Promise.allSettled([f.speak(e),await I(),T(n.overHundredSound,1)]),this.currentValue=0,S(),t())}))}#s(e){return new Promise((async(n,t)=>{this.gameOver&&(await x(e),await Promise.allSettled([I(),f.speak(e)]),this.currentValue=0,S(),n())}))}async renderPlayGround(){"init"===n.mode&&(n.mode="started"),this.ownSound.play(),this.ownSound.loop=!0;const e=L(`Hi ${this.name}, It's your turn. \n        You are currently at the position ${this.currentPosition}. \n        To role the dice, press the space bar or enter key. \n        To hear these instructions again, press CTRL + J.`);f.speak(e),await x(e,{inputId:"role-dice",inputLabel:"Role Dice"}),k.roleDice()}async movePiece(){n.loading||(n.loading=!0);const e=`${this.name}, moving your piece...`;this.currentPosition+=this.currentValue,await new Promise(((e,t)=>{if(n.currentPlayer.currentPosition>100){const t=n.currentPlayer.currentPosition-n.currentPlayer.currentValue;n.currentPlayer.currentValue=100-t,n.currentPlayer.currentPosition=t,n.currentPlayer.overHundred=!0,e()}100===n.currentPlayer.currentPosition&&(n.currentPlayer.gameOver=!0,e()),g[n.currentPlayer.currentPosition]&&(n.currentPlayer.ladder={position:g[n.currentPlayer.currentPosition]},e()),v[n.currentPlayer.currentPosition]&&(n.currentPlayer.snake={position:v[n.currentPlayer.currentPosition]},e()),e()})),this.overHundred?await this.#o(e):this.gameOver?await this.#s(e):this.ladder?await this.#r(e):this.snake?await this.#a(e):(await x(e),await Promise.allSettled([f.speak(e),I()]),this.finalStatus())}async finalStatus(){n.loading&&(n.loading=!1);let e="";const t={inputId:"continue",inputLabel:"Continue"};if(this.overHundred)e=`${this.name}, You are still at the position ${this.currentPosition}. \n            To continue, press the space bar or enter key. \n            To hear these instructions again, press CTRL + J.`,this.overHundred=!1;else{if(this.gameOver)return t.inputId="finish-game",t.inputLabel="Finish Game",e="Game Status. \n            To finish the game, press the space bar or enter key. \n            To hear these instructions again, press CTRL + J.",f.speak(e),await x(e,t),void this.finishGame();e=`${this.name}, You've reached at the position ${this.currentPosition}. \n            To continue, press the space bar or enter key. \n            To hear these instructions again, press CTRL + J.`}if(n.index===n.players.length-1)return f.speak(e),await x(e,t),n.index=0,this.ownSound.pause(),this.ownSound.currentTime=0,n.currentPlayer=n.players[0],void n.currentPlayer.renderPlayGround();f.speak(e),await x(e,t),this.ownSound.pause(),this.ownSound.currentTime=0,n.currentPlayer=n.players[++n.index],n.currentPlayer.renderPlayGround()}finishGame(){console.log("Game finished!")}},$=function(e){return new Promise(((n,t)=>{const i=new Audio(e.file);i.addEventListener("canplaythrough",(()=>{e.volume?i.volume=e.volume:i.volume=.025,e.loop&&(i.loop=e.loop),n(i)}))}))},T=function(e,n){return new Promise(((t,i)=>{e.play(),e.onended=()=>{--n?e.play():t()}}))},I=async function(){return new Promise((async(e,t)=>{await T(n.movingPieceSound,n.currentPlayer.currentValue),e()}))},L=function(e){return`<h2>Round ${n.rounds}:</h2>\n        <p>${e}</p>`},x=function(e,i){return i=i||!1,new Promise((async(r,a)=>{let o="";if("init"===n.mode&&!n.loading){const a=`<form id="${i.formId}">\n            <label for="${i.inputId}">${i.inputLabel}</label>\n            <input id="${i.inputId}" type="${i.inputType}" aria-describedby="${i.inputId}-instructions"\n                ${"number"===i.inputType?'min="1" max="4"':""}>\n            <p id="${i.inputId}-instructions">${e}</p>\n            <button type="submit" hidden>Next</button>\n            </form>`;t.innerHTML=a,o=document.getElementById(i.inputId),document.getElementById(i.formId).addEventListener("submit",(e=>{e.preventDefault(),function(e,t){if("numberOfPlayers"!==e.inputId||n.players.length)n.players[n.index].name=t||`Player ${n.index+1}`;else{let e=0;for(;e<t;e++)n.players.push(new b(n.playersSound[e]))}}(i,o.value),r()})),o.addEventListener("input",(e=>{f.speak(e.target.value)}))}if("init"===n.mode&&n.loading){const n=`<div id="instructions" tabindex="0">${e}</div>`;t.innerHTML=n,o=document.getElementById("instructions"),r()}if("started"===n.mode&&!n.loading){const n=`<div id="instructions">${e}</div>\n            <button id="${i.inputId}" aria-describedby="instructions">${i.inputLabel}</button>`;t.innerHTML=n,o=document.getElementById(i.inputId),o.onclick=()=>r()}if("started"===n.mode&&n.loading){const n=`<div id="instructions" tabindex="0">${e}</div>`;t.innerHTML=n,o=document.getElementById("instructions"),r()}o&&(o.focus(),o.addEventListener("keydown",(async t=>{if(t.ctrlKey&&"j"===t.key&&(t.preventDefault(),f.speak(e)),t.ctrlKey&&"s"===t.key){let i={};t.preventDefault(),n.speech?(i.cancel&&i.cancel(),f.speak("Speech Off"),n.speech=!1):(n.speech=!0,await f.speak(`Speech On. ${e}`,i))}})))}))},E=new class{constructor(){}firstScreenWidgit(){t.innerHTML='<form id="start-game" action="#">\n            <h1>Snakes and Ladders</h1>\n            <button id="start">Start Game</button>\n        </form>',document.getElementById("start").focus(),document.getElementById("start-game").addEventListener("submit",(e=>{e.preventDefault(),this.init()}))}init(){n.loading||(n.loading=!0);const e="Please Wait...";return new Promise((async(t,g)=>{x(e);const v=await $(i);n.introSound=v;const S=await $(r);n.currentSound=S;const k=await $(a);n.playersSound.push(k);const b=await $(o);n.playersSound.push(b);const T=await $(s);n.playersSound.push(T);const I=await $(u);n.playersSound.push(I);const L=await $(l);n.rollingDiceSound=L;const E=await $(d);n.movingPieceSound=E;const H=await $(c);n.ladderSounds.ladderSound=H;const O=await $(p);n.snakeSounds.snakeSound=O;const D=await $(m);n.ladderSounds.movingPieceSound=D;const C=await $(h);n.snakeSounds.movingPieceSound=C;const G=await $(y);n.overHundredSound=G;const V=await $(w);n.winSounds.winSound=V;const Y=await $(P);n.winSounds.cheersSound=Y,await f.speak(e),this.welcomeAnimation(),t()}))}async welcomeAnimation(){n.loading&&(n.loading=!1);const e=document.createElement("p");e.textContent="Welcome",e.classList.add("welcome"),t.replaceChild(e,document.getElementById("instructions")),n.introSound.play(),e.style.animation=`welcome ${n.introSound.duration}s`,setTimeout((async()=>await f.speak(e.textContent)),1e3*n.introSound.duration/4),n.introSound.onended=()=>this.fetchNumberOfPlayers()}async fetchNumberOfPlayers(){const e="Enter number of players. \n        Maximum up-to 4 players are allowed. \n        You can also use up or down arrow keys to adjust the value. \n        To hear these instructions again, Press CTRL + J.";n.currentSound.play(),f.speak(e),await x(e,{formId:"number-of-players",inputId:"numberOfPlayers",inputType:"number",inputLabel:"Number of Players"}),this.fetchPlayersName()}async fetchPlayersName(){const e=`Enter name of the player number ${n.index+1}. \n        To hear these instructions again, press CTRL +J.`,t={formId:"player-name",inputId:"playerNameInput",inputLabel:`Name of the Player Number ${n.index+1}`,inputType:"text"};if(f.speak(e),n.index===n.players.length-1)return await x(e,t),n.index=0,n.currentSound.pause(),n.currentPlayer=n.players[0],void n.currentPlayer.renderPlayGround();await x(e,t),n.index++,this.fetchPlayersName()}};"serviceWorker"in navigator?window.onload=()=>{navigator.serviceWorker.register("service-worker.js").then((e=>{console.log("SW registered: ",e)})).catch((e=>{console.log("SW registration failed: ",e)})),E.firstScreenWidgit()}:window.onload=()=>{E.firstScreenWidgit()}})();